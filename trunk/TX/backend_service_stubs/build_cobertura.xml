<project name="backend_service_stubs" default="coverage">
	<property name="project.dir" value="."/>
	<property name="src.dir" value="./src"/>
	<property name="classes.dir" value="./classes"/>
	<property name="lib.dir" value="./lib"/>
	<property name="app_path" value="."/>
	<property name="app_name" value="backend_service_stubs"/>
	<property name="version" value="x.x.x"/>
	<property name="dist" value="dist"/>
	<property name="origin.lib.dir" value="./lib" />
	<property name="unittest.dir" value="./unittest" />
	<property name="instrumented.classes.dir" value="${classes.dir}/classesOfInst"/>
	<property name="original.classes.dir" value="${classes.dir}"/>
	<property name="report.dir" value="./cobertura/report" />
	<property name="junit.report.dir" value="./junit/report" />
	<property name="junit.report.html.dir" value="${junit.report.dir}/html" />
	<property name="coverage.cobertura.summary.dir" location="${report.dir}/cobertura-summary-xml"/>
	<property name="coverage.cobertura.html.dir" location="${report.dir}/cobertura-html"/>
	<property name="test.classes.dir" value="${classes.dir}" />
	<property name="config.dir" value="./unittest/unittest-config" />
	
	
	<!-- define our classpath -->
	<path id="compile.class.path">
		<fileset dir="${lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
		<fileset dir="${origin.lib.dir}">
			<include name="**/*.jar"/>
		</fileset>
	</path>

	<taskdef classpathref="compile.class.path" resource="tasks.properties" />
	
	<target name="compile">
		<delete dir="${classes.dir}" />
		<mkdir dir="${classes.dir}"/>
		
		<copy todir="${classes.dir}" failonerror="false">
			<fileset dir="${src.dir}">
				<include name="**/*.xml"/>
			</fileset>
		</copy>	
	
		<javac srcdir="${src.dir}" destdir="${classes.dir}" classpathref="compile.class.path" debug="yes"/>
	</target>


	<target name="create-jar" depends="compile">
		<delete dir="${app_path}/${dist}"/>
		<mkdir dir="${app_path}/${dist}"/>
		<jar jarfile="${app_name}-${version}.jar" basedir="${classes.dir}"/>
		<delete quiet="true" dir="${classes.dir}"/>
		<move todir="${app_path}/${dist}" file="${app_name}-${version}.jar"/>
	</target>
	
	
	<target name="instrument">
		<!-- Remove the coverage data file and any old instrumentation classes -->
		<delete file="cobertura.ser" />
		<delete dir="${instrumented.classes.dir}" />
		<!-- Instrument the application classes, writing the instrumented classes into ${instrumented.classes.dir} -->
		<cobertura-instrument todir="${instrumented.classes.dir}">
			<!-- The following line causes instrument to ignore any source line containing a reference to log4j, for the purpose of coverage reporting -->
			<ignore regex="org.apache.log4j.*"/>
			<fileset dir="${original.classes.dir}">
				<include name="**/*.class"/>
			</fileset>
		</cobertura-instrument>
	</target>
	

    <path id="compile.unittestclass.path">
		<path refid="compile.class.path"/>
		<pathelement path="${original.classes.dir}"/> 
		<pathelement path="${test.classes.dir}"/> 
	</path>
	
   	<target name="compiletest" depends="compile">
		<mkdir dir="${test.classes.dir}" />
		<javac srcdir="${unittest.dir}" destdir="${test.classes.dir}" classpathref="compile.unittestclass.path" debug="yes"/>
	</target>
	
	<path id="test.classpath">   
		<pathelement path="${instrumented.classes.dir}"/> 
		<pathelement path="${original.classes.dir}"/>
		<pathelement path="${test.classes.dir}"/>
		<pathelement path="${config.dir}"/>
		<path refid="compile.class.path"/>
	</path> 
	 	
	<target name="junittest" depends="compiletest">
	  <delete dir="${report.dir}" />
	  <mkdir dir="${report.dir}" />
	  <delete dir="${junit.report.dir}" />
	  <mkdir dir="${junit.report.dir}" />
	  
	  <junit printSummary="yes"> 
	    <formatter type="xml"/>
    	<classpath refid="test.classpath" /> 
	  	<batchtest fork="yes" todir="${junit.report.dir}">
	      <fileset dir="${unittest.dir}">
	        <include name="**/Test*.java" />
	      </fileset>
	    </batchtest>
	  </junit>
	</target>


	<target name="junitreport" depends="junittest">
        <junitreport todir="${junit.report.dir}">
            <fileset dir="${junit.report.dir}">
                <include name="TEST-*.xml"/>
            </fileset>
            <report format="frames" todir="${junit.report.html.dir}"/>
        </junitreport>
    </target>


	<target name="coverage-report">
        <!-- Generate an XML file containing the coverage data using the 'srcdir' attribute -->
    	<cobertura-report srcdir="${src.dir}" destdir="${report.dir}" format="xml" />
    </target>
	
	<!-- ===============================
         target: summary-coverage-report              
		 =============================== -->
    <target name="summary-coverage-report">
        <!-- Generate an summary XML file containing the coverage data using the 'srcidir' attribute -->
    	<cobertura-report srcdir="${src.dir}" destdir="${coverage.cobertura.summary.dir}" format="summaryXml" />
    </target>
	
	<!-- ================================= 
          target: alternate-coverage-report              
         ================================= -->
    <target name="alternate-coverage-report">
        <!-- Generate a series of HTML files containing the coverage data in a user-readable form using nested source filesets -->
    	<cobertura-report destdir="${coverage.cobertura.html.dir}">
    		<fileset dir="${src.dir}">
    			<include name="**/*.java"/>
    		</fileset>
    	</cobertura-report>
    	<delete dir="${classes.dir}" />
    </target>
    
	<target name="coverage" depends="compile,instrument,junitreport,coverage-report,summary-coverage-report,alternate-coverage-report" description="Compile, instrument ourself, run the tests and generate JUnit and coverage reports." />	
</project>